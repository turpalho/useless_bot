import logging
import random

from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Text, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InputMediaPhoto

from database.repository import Repo
from tg_bot.config import Config
from tg_bot.keyboards.inline_user import (
    get_main_keyboard, get_cancel_to_menu_keyboard,
    get_currency_keyboard)
from tg_bot.filters.user import AddAdminFilter
from tg_bot.misc.states import WeatherState, PollsState

logger = logging.getLogger(__name__)

user_router = Router()
user_router.message.filter(F.chat.type == "private")
user_router.callback_query.filter(F.message.chat.type == "private")


@user_router.message(CommandStart())
async def user_start(message: Message, repo: Repo, state: FSMContext) -> None:
    if (not await repo.user_exists(message.chat.id)):
        await repo.add_user(user_id=message.chat.id,
                            username=message.chat.username,
                            full_name=message.chat.full_name)

    await state.clear()
    text = f"–ú–µ–Ω—é:"
    await message.answer(text=text,
                         reply_markup=await get_main_keyboard())


@user_router.callback_query(F.data == "main_menu")
async def user_start(call: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    text = f"–ú–µ–Ω—é:"
    try:
        await call.message.edit_text(text=text,
                                     reply_markup=await get_main_keyboard())
    except:
        await call.message.delete()
        await call.message.answer(text=text,
                                  reply_markup=await get_main_keyboard())

# –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
@user_router.callback_query(F.data == "weather")
async def application_sent(call: CallbackQuery, repo: Repo, state: FSMContext) -> None:
    await call.answer()
    await state.set_state(WeatherState.waiting_enter_city)
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:'
    await call.message.edit_text(text=text,
                                 reply_markup=await get_cancel_to_menu_keyboard())


@user_router.message(WeatherState.waiting_enter_city)
async def application_sent(message: Message, state: FSMContext, config: Config) -> None:
    await state.clear()
    response = await config.tg_bot.owm_api.get_weather(config=config, city=message.text)
    text = f"üè¢  –ì–æ—Ä–æ–¥: {message.text}\n‚õÖ  –ü–æ–≥–æ–¥–∞: {response['weather'][0]['description']}\nüå°  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {response['main']['temp']} ¬∞C"
    await message.answer(text=text,
                         reply_markup=await get_cancel_to_menu_keyboard())

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
@user_router.callback_query(F.data == "exchange")
async def application_sent(call: CallbackQuery) -> None:
    await call.answer()
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç–µ –º–µ–Ω—è—Ç—å:'
    await call.message.edit_text(text=text,
                                 reply_markup=await get_currency_keyboard())


@user_router.callback_query(Text(startswith="currency_"))
async def application_sent(call: CallbackQuery, config: Config) -> None:
    await call.answer()
    currencies_to = {"EUR": "üá™üá∫  –ï–≤—Ä–æ",
                     "RUB": "üá∑üá∫  –†—É–±–ª—å",
                     "USD": "üá∫üá∏  –î–æ–ª–ª–∞—Ä",
                     "TRY": "üáπüá∑  –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞",
                     "GBP": "üá¨üáß  –§—É–Ω—Ç",
                     "CNY": "üá®üá≥  –Æ–∞–Ω—å"}
    currency_from = call.data.split("_")[1]
    rates = [f"{currencies_to[currency_from]}: \n"]
    currencies_to.pop(currency_from)
    response = await config.tg_bot.exchanger_api.fetch_one(config=config,
                                                           currency_from=currency_from,
                                                           currencies_to=currencies_to)

    for currency, rate in response['rates'].items():
        rates.append(currencies_to[currency] + ": " + str(rate))
    await call.message.edit_text(text='\n'.join(rates),
                                 reply_markup=await get_cancel_to_menu_keyboard())

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
@user_router.callback_query(F.data == "polls")
async def application_sent(call: CallbackQuery, repo: Repo, state: FSMContext) -> None:
    await call.answer()
    await state.set_state(PollsState.waiting_question)
    text = '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–µ–≥–æ –æ–ø—Ä–æ—Å–∞:'
    await call.message.edit_text(text=text,
                                 reply_markup=await get_cancel_to_menu_keyboard())


@user_router.message(PollsState.waiting_question)
async def application_sent(message: Message, state: FSMContext, config: Config) -> None:
    await state.set_data({"question": message.text})
    await state.set_state(PollsState.waiting_options)
    text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
    await message.answer(text=text,
                         reply_markup=await get_cancel_to_menu_keyboard())


@user_router.message(PollsState.waiting_options)
async def application_sent(message: Message, state: FSMContext, bot: Bot) -> None:
    state_data = await state.get_data()
    await bot.send_poll(message.chat.id,
                        question=state_data['question'],
                        options=message.text.split(','),
                        is_anonymous=True,
                        allows_multiple_answers=True)
    text = "–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω"
    await message.answer(text=text,
                         reply_markup=await get_cancel_to_menu_keyboard())
    await state.clear()

# –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –º–∏–ª—ã–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏
@user_router.callback_query(F.data == "imgs")
async def application_sent(call: CallbackQuery, config: Config) -> None:
    await call.answer()
    query = "cute-animals"
    response = await config.tg_bot.pxels_api.search_photos(config=config, query=query)
    text = '–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –º–∏–ª—ã–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏:'

    await call.message.delete()
    await call.message.answer_photo(
        response['photos'][random.randrange(1, 5)]['url'],
        caption=text,
        parse_mode="markdown",
        reply_markup=await get_cancel_to_menu_keyboard())


@user_router.message(AddAdminFilter())
async def add_admin(message: Message, config: Config, repo: Repo) -> None:
    if not message.chat.id in config.tg_bot.admin_ids:
        config.tg_bot.admin_ids.append(message.chat.id)
        await repo.update_admin_ids(config.tg_bot.admin_ids)
        await message.answer("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    else:
        await message.answer("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")


@user_router.message(Command(commands=["help"]))
async def get_help(message: Message):
    text = (
        """```
–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã'.
--------------------------
–ß—Ç–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É, –Ω–∞–∂–º–∏—Ç–µ '–ö–æ–Ω–≤–µ—Ä—Ç–∞–∫—Ü–∏—è –≤–∞–ª—é—Ç'.
--------------------------
–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞'.
--------------------------
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –º–∏–ª—ã–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏, –Ω–∞–∂–º–∏—Ç–µ '–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞'.
```"""
    )
    await message.answer(text=text, parse_mode="Markdown")
